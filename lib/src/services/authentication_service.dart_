import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:isotope/src/models/user.dart';
import 'package:isotope/src/services/analytics_service.dart';
import 'package:isotope/utilities.dart';
import 'package:studio/managers/service_manager.dart';
import 'package:studio/services/firestore_service.dart';

class AuthenticationService {
  final AnalyticsService _analyticsService = serviceManager<AnalyticsService>();
  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;
  final FirestoreService _firestoreService = serviceManager<FirestoreService>();

  User _currentUser;
  User get currentUser => _currentUser;

  Future authenticateWithEmail({
    @required String email,
    @required String password,
  }) async {
    try {
      var authResult = await _firebaseAuth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      
      await _getCurrentUser(authResult.user);

      return authResult.user != null;
    } catch (e) {
      return e.message;
    }
  }

  Future registerWithEmail({
    @required String email,
    @required String name,
    @required String password,
  }) async {
    try {
      var authResult = await _firebaseAuth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      _currentUser = User(
        id: authResult.user.uid,
        email: email,
        name: name,
      );

      await _firestoreService.createUser(_currentUser);
      await _analyticsService.setUserProperties(userId: authResult.user.uid);

      return authResult.user != null;
    } catch (e) {
      return e.message;
    }
  }

  Future<bool> isUserAuthenticated() async {
    var user = await _firebaseAuth.currentUser();
    await _getCurrentUser(user);
    
    return user != null;
  }

  Future _getCurrentUser(FirebaseUser user) async {
    if (user != null) {
      _currentUser = await _firestoreService.getUser(user.uid);
      await _analyticsService.setUserProperties(userId: user.uid);
    }
  } 
}
